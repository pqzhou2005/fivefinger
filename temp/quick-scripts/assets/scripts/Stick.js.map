{"version":3,"sources":["Stick.js"],"names":["cc","Class","extends","Component","properties","stretchEachLength","rotateDuration","onLoad","currentLength","state","start","update","dt","node","height","setScale","stopStretch","rotate","finishAction","callFunc","dispatchEvent","Event","EventCustom","runAction","sequence","RotateBy","getCurrentLength","onCollisionEnter","other","self","console","log","stopAllActions","world","aabb","preAabb","t","transform","r","radius","p","position","ps","points","onCollisionStay","onCollisionExit"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;;AAERC,2BAAmB,CAFX;;AAIRC,wBAAgB;;AAJR,KAHP;;AAWL;;AAEAC,UAbK,oBAaK;;AAEN,aAAKC,aAAL,GAAqB,CAArB;AACA;AACA,aAAKC,KAAL,GAAa,CAAb;AACH,KAlBI;AAoBLC,SApBK,mBAoBI,CAER,CAtBI;AAwBLC,UAxBK,kBAwBGC,EAxBH,EAwBO;;AAER,YAAG,KAAKH,KAAL,IAAc,CAAd,IAAmB,KAAKD,aAAL,GAAqB,KAAKK,IAAL,CAAUC,MAArD,EAA6D;;AAEzD,iBAAKN,aAAL,IAAsB,KAAKH,iBAA3B;AACA,iBAAKQ,IAAL,CAAUE,QAAV,CAAmB,KAAKP,aAAL,GAAmB,KAAKK,IAAL,CAAUC,MAAhD;AACH;AACJ,KA/BI;AAiCLE,eAjCK,yBAiCS;AACV;AACA,aAAKP,KAAL,GAAa,CAAb;AACH,KApCI;AAsCLQ,UAtCK,oBAsCI;;AAEL,YAAG,KAAKR,KAAL,IAAc,CAAjB,EAAoB;;AAEhB,iBAAKO,WAAL;;AAEA,gBAAIE,eAAelB,GAAGmB,QAAH,CAAY,YAAY;;AAEvC,qBAAKN,IAAL,CAAUO,aAAV,CAAyB,IAAIpB,GAAGqB,KAAH,CAASC,WAAb,CAAyB,UAAzB,EAAqC,IAArC,CAAzB;;AAEA;AACH,aALkB,EAKjB,IALiB,CAAnB;;AAOA,iBAAKT,IAAL,CAAUU,SAAV,CAAoBvB,GAAGwB,QAAH,CAAY,IAAIxB,GAAGyB,QAAP,CAAgB,KAAKjB,aAAL,GAAmB,KAAKF,cAAxB,GAAuC,GAAvD,EAA4D,GAA5D,CAAZ,EAA6EY,YAA7E,CAApB;AACH;AACJ,KArDI;AAuDLQ,oBAvDK,8BAuDc;AACf,eAAO,KAAKlB,aAAZ;AACH,KAzDI;;;AA2DL;;;;;AAKAmB,sBAAkB,0BAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACrCC,gBAAQC,GAAR,CAAY,oBAAZ;AACA,aAAKlB,IAAL,CAAUmB,cAAV;;AAGA;AACA,YAAIC,QAAQJ,KAAKI,KAAjB;;AAEA;AACA,YAAIC,OAAOD,MAAMC,IAAjB;;AAEA;AACA,YAAIC,UAAUF,MAAME,OAApB;;AAEA;AACA,YAAIC,IAAIH,MAAMI,SAAd;;AAEA;AACA,YAAIC,IAAIL,MAAMM,MAAd;AACA,YAAIC,IAAIP,MAAMQ,QAAd;;AAEA;AACA,YAAIC,KAAKT,MAAMU,MAAf;AACH,KAvFI;AAwFL;;;;;AAKAC,qBAAiB,yBAAUhB,KAAV,EAAiBC,IAAjB,EAAuB;AACpC;AACH,KA/FI;AAgGL;;;;;AAKAgB,qBAAiB,yBAAUjB,KAAV,EAAiBC,IAAjB,EAAuB;AACpC;AACH;;AAvGI,CAAT","file":"Stick.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        stretchEachLength: 7,   \r\n        \r\n        rotateDuration: 0.5,\r\n\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n\r\n        this.currentLength = 0;\r\n        //伸缩状态\r\n        this.state = 0;   \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n\r\n        if(this.state == 0 && this.currentLength < this.node.height) {\r\n\r\n            this.currentLength += this.stretchEachLength;\r\n            this.node.setScale(this.currentLength/this.node.height);\r\n        }      \r\n    },\r\n\r\n    stopStretch() {        \r\n        //停止伸缩\r\n        this.state = 1; \r\n    },    \r\n\r\n    rotate() {\r\n\r\n        if(this.state == 0) {\r\n\r\n            this.stopStretch();\r\n\r\n            var finishAction = cc.callFunc(function () {                \r\n\r\n                this.node.dispatchEvent( new cc.Event.EventCustom('gameover', true) );\r\n\r\n                // console.log(this);\r\n            },this);\r\n\r\n            this.node.runAction(cc.sequence(new cc.RotateBy(this.currentLength*this.rotateDuration/100, 180),finishAction));\r\n        }        \r\n    },\r\n\r\n    getCurrentLength() {\r\n        return this.currentLength;\r\n    },\r\n\r\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionEnter: function (other, self) {\r\n        console.log('on collision enter');\r\n        this.node.stopAllActions();\r\n\r\n\r\n        // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\r\n        var world = self.world;\r\n\r\n        // 碰撞组件的 aabb 碰撞框\r\n        var aabb = world.aabb;\r\n\r\n        // 节点碰撞前上一帧 aabb 碰撞框的位置\r\n        var preAabb = world.preAabb;\r\n\r\n        // 碰撞框的世界矩阵\r\n        var t = world.transform;\r\n\r\n        // 以下属性为圆形碰撞组件特有属性\r\n        var r = world.radius;\r\n        var p = world.position;\r\n\r\n        // 以下属性为 矩形 和 多边形 碰撞组件特有属性\r\n        var ps = world.points;\r\n    },\r\n    /**\r\n     * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionStay: function (other, self) {\r\n        //console.log('on collision stay');\r\n    },\r\n    /**\r\n     * 当碰撞结束后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionExit: function (other, self) {\r\n        //console.log('on collision exit');\r\n    },\r\n\r\n});\r\n"]}